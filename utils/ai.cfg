#textdomain wesnoth-gse

#define STEPPE_MISC_AI
        recruitment_randomness=50
        recruitment_diversity=1.5
#tries to free allied prisoners when possible
        [goal]
        [criteria]
            ability=steppe_captured
            [filter_side]
            [ally_of]
                side=$side_number
            [/ally_of]
            [/filter_side]
        [/criteria]
        value=10
        [/goal]
#the "add aspects to aside that prevent attacking prisoners" code is now added via [modify_side] lower in the code, making this obsolete
##this is to prevent AI from attacking their own, or allies' prisoners
#        [aspect]
#            id=attacks
#            [facet]
#                invalidate_on_gamestate_change=yes
#                [filter_own]
#                [/filter_own]
#                [filter_enemy]
#                [not]                
#                    ability=steppe_captured
#                [/not]
#                [/filter_enemy]
#            [/facet]
#        [/aspect]
#enddef

#define OGRE_AI
#    terrain_liked=Gg, Ww, Wo
    [ai]
#        recruitment_pattern="fighter,fighter,mixed fighter,mixed fighter,healer,archer,scout"
    {STEPPE_MISC_AI}
    [/ai]
#enddef

#define KHAGANATE_AI
    terrain_liked=Ss, Hh, Ha, Ww
    [ai]
#        recruitment_pattern="archer,scout,fighter,fighter,mixed fighter,scout,mixed fighter,fighter,archer,scout"
        grouping=offensive #this isn't really a solution for keeping slaves close to nagas, but it's better than nothing, hopefully
  [aspect]
    id=recruitment_instructions
    [facet]
       turns=1
       [value]
#makes the ai recruit at least one overseer, so that the slaves get into proper formation
         [recruit]
            type=Khaganate_Naga_Overseer
            number=1
            blocker=no
         [/recruit]
#makes the ai recruit at least one serpenthead, as they are not particularly cost-efficient without the abilities (which the ai doesn't quite understand)
         [recruit]
            type=Khaganate_Serpenthead
            number=1
            blocker=no
         [/recruit]
         [recruit]
            importance=0#to make the AI recruit other units
         [/recruit]
       [/value]
    [/facet]
  [/aspect]
  {STEPPE_MISC_AI}
    [/ai]
#enddef

#define HUNN_AI
    terrain_liked=Ss, Hh, Ha, Ww
    [ai]
#        recruitment_pattern="scout,healer,mixed fighter,fighter,fighter,mixed fighter,healer,archer,mixed fighter,archer,scout"
  [aspect]
    id=recruitment_instructions
    [facet]
       turns=1
       [value]
         [recruit]
            type=Hunn_Demon
            number=1
            blocker=no
         [/recruit]
         [recruit]
            type=Hunn_Chernava
            number=2
            blocker=no
         [/recruit]
         [recruit]
            importance=0#to make the AI recruit other units
         [/recruit]
       [/value]
    [/facet]
  [/aspect]        
  {STEPPE_MISC_AI}        
    [/ai]
    [ai]
        turns=1-6
        caution=0.8
        grouping=defensive
        support_villages=yes
    [goal]
        name=protect_unit
        [criteria]
            type=Hunn_Chernava
            side=$side_number
        [/criteria]
        protect_radius=7
        value=5
    [/goal]
    [/ai]
#enddef

#define SLAV_AI
#    terrain_liked=Ss, Ft
    [ai]
#        recruitment_pattern="builder,fighter,fighter,mixed fighter,mixed fighter,healer,archer,scout"
    [aspect]
        id=recruitment_instructions
        [facet]
           turns=1
           [value]
             [recruit]
                type=Slav_Apprentice
                number=1
                blocker=no
             [/recruit]
             [recruit]
                importance=0#to make the AI recruit other units
             [/recruit]
           [/value]
        [/facet]
    [/aspect]        
    {STEPPE_MISC_AI}        
    [/ai]
#enddef

#define KINGDOM_AI
#    terrain_liked=Ss, Hh, Ha, Ww
    [ai]
#        recruitment_pattern="scout,fighter,fighter,archer,mixed fighter,archer,scout"
#  [aspect]
#    id=recruitment_instructions
#    [facet]
#       turns=1
#       [value]
#         [recruit]
#            type=Slav_Builder
#            number=2
#            blocker=no
#         [/recruit]
#         [recruit]
#            importance=0#to make the AI recruit other units
#         [/recruit]
#       [/value]
#    [/facet]
#  [/aspect]        
  {STEPPE_MISC_AI}        
    [/ai]
#enddef

#define MANDATE_AI
#    terrain_liked=Ss, Hh, Ha, Ww
    [ai]
#        recruitment_pattern="scout,fighter,fighter,archer,mixed fighter,fighter,archer,scout"
#  [aspect]
#    id=recruitment_instructions
#    [facet]
#       turns=1
#       [value]
#         [recruit]
#            type=Slav_Builder
#            number=2
#            blocker=no
#         [/recruit]
#         [recruit]
#            importance=0#to make the AI recruit other units
#         [/recruit]
#       [/value]
#    [/facet]
#  [/aspect]        
  {STEPPE_MISC_AI}        
    [/ai]
#enddef

#define STEPPE_FLAGVARIANT SIDE ABILITY FLAG
[if]
[have_unit]
    side={SIDE}
    ability={ABILITY}
    cancrecruit=yes
[/have_unit]
[then]
[modify_side]
    side={SIDE}
    {FLAG_VARIANT {FLAG}}    
[/modify_side]
[/then]
[/if]
#enddef

#define STEPPE_MICROAIS SIDE

[store_side]
side={SIDE}
variable=steppe_ai_currentside
[/store_side]

[if]
#checks if the side exists
{VARIABLE_CONDITIONAL steppe_ai_currentside.side not_equals $steppe_nonexistent_variable}
#[have_unit]
#    side={SIDE}
#removed, as it does not work in multiplayer with ai sides
#    [filter_side]
#        controller=ai
#    [/filter_side]
#[/have_unit]
[then]

#give each faction their own flag type:

[if]
{VARIABLE_CONDITIONAL steppe_disable_faction_flags not_equals yes}
[then]

{STEPPE_FLAGVARIANT {SIDE} ogrefaction ragged}
{STEPPE_FLAGVARIANT {SIDE} khaganatefaction long}
{STEPPE_FLAGVARIANT {SIDE} hunnfaction undead}
{STEPPE_FLAGVARIANT {SIDE} slavfaction loyalist}
{STEPPE_FLAGVARIANT {SIDE} kingdomfaction knalgan}
{STEPPE_FLAGVARIANT {SIDE} mandatefaction wood-elvish}

[/then]
[/if]

        [micro_ai]
            side={SIDE}
            ai_type=hang_out
            action=add
            id=work_ai
            [filter]
                ability=workai
            [not]
                cancrecruit=yes
            [/not]
            [filter_location]
                [not]
                terrain=*^V*
                [/not]
            [/filter_location]
            [/filter]
            [filter_location]
                terrain=*^V*
                [not]
                [filter]
                [/filter]
                [/not]
            [/filter_location]
        [/micro_ai]
        [micro_ai]
            side={SIDE}
            ai_type=coward
            action=add
            id=work_sit
            [filter]
                ability=workai
            [not]
                cancrecruit=yes
            [/not]
            [filter_location]
                terrain=*^V*
            [/filter_location]
            [/filter]
            distance=0
        [/micro_ai]

#healer ai, for all factions
#Currently disabled, as this micro ai affects the attack aspect, breaking the "AI does not attack prisoners" AI aspect code. Unless someone suggests a way to make the micro ai and the attack aspect coexist, this will stay commented out for now.
#        [micro_ai]
#            side={SIDE}
#            ai_type=healer_support
#            action=add
#            [filter]
#                 ability=healing
#            [/filter]
#            aggression=0.5#still attacsk when there is nobody to support
#            max_threats=5#tries to avoid hexes with too many enemies nearby
#            injured_units_only=yes#this is to make shamans a bit more agressive, instead of just being passive healers
#        [/micro_ai]

#removed the faction check, as it makes the AI not work on survival maps, where there are no enemy units at the start
#[if]
# [have_unit]
#     side={SIDE}
#     ability=khaganatefaction
# [/have_unit]
# [then]


#custom-ish micro ai, makes slaves stick to the overseers
        [micro_ai]
            side={SIDE}
            ai_type=slave_ai
            action=add
            [filter]
                ability=steppe_oversight
                [or]
                     ability=steppe_khagans_presense
                [/or]
                [and]
                canrecruit=no   #otherwise slaves would just hang around at the keep
                [/and]
            [/filter]
            [filter_second]
                ability=steppe_slave
            [/filter_second]
            ca_score=30000
#the death chances are so the unit is more cautious
            messenger_death_chance=0.0
            enemy_death_chance=0.5
            waypoint_x=1
            waypoint_y=1
        [/micro_ai]

#makes overseers move earlier than slaves, and approach enemies
        [micro_ai]
            side={SIDE}
            ai_type=goto
            action=add
            ca_id=khaganate_overseer_goto

            [filter]
                ability=steppe_oversight
            [not]
                canrecruit=yes
            [/not]
            [/filter]
            [filter_location]
            [filter]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
            [/filter]
            radius=2
            [/filter_location]
            ca_score=31000
        [/micro_ai]

#makes slaves free when there are no allies nearby
        [micro_ai]
            side={SIDE}
            ai_type=coward
            id=khaganate_slaveai2
            action=add
            [filter]
                ability=steppe_slave
            [filter_location]
            [filter]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
#does not flee from units that cannot free slaves
#WARNING: INCLUDES KHAGANATE, SO DON'T TEST ON KHAGANATE VS KHAGANATE
            [not]
                        {STEPPE_SLAVEFREE_EXCEPTION}
            [/not]
            [/filter]
            radius=6
            [/filter_location]
            [not]
            [filter_location]
            [filter]
                ability=steppe_oversight
            [/filter]
            radius=3
            [/filter_location]
            [or]
            [filter_location]
            [filter]
            [ally_of]
                side={SIDE}
            [/ally_of]            
            [/filter]
            radius=2
            [/filter_location]
            [/or]
            [/not]
            [/filter]
            [filter_second]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
#does not flee from units that cannot free slaves
#WARNING: INCLUDES KHAGANATE, SO DON'T TEST ON KHAGANATE VS KHAGANATE
            [not]
                        {STEPPE_SLAVEFREE_EXCEPTION}
            [/not]
            [/filter_second]
            id=coward3
            distance=5
            attack_if_trapped=yes
        [/micro_ai]
# [/then]
# [/if]

#removed the faction check, as it makes the AI not work on survival maps, where there are no enemy units at the start

#[if]
# [have_unit]
#     side={SIDE}
#     ability=hunnfaction
# [/have_unit]
# [then]

#commented out, as it causes hunns to be too passive in survival
##reusing the slave ai to make injured undead stick next to containers of darkness
#        [micro_ai]
#            side={SIDE}
#            ai_type=slave_ai
#            action=add
#            [filter]
#                ability=steppe_container_of_darkness
#                cancrecruit=no
#            [/filter]
#            [filter_second]
#                race=undead
#            [/filter_second]
#            ca_score=30000
##the death chances are so the unit is more cautious
## commented out for now
##            messenger_death_chance=0.0
##            enemy_death_chance=0.5
#            waypoint_x=1
#            waypoint_y=1
#        [/micro_ai]

#makes the ai not rush with witches
        [micro_ai]
            side={SIDE}
            ai_type=coward
            ca_id=steppe_hunn_witch_ai
            action=add
            [filter]
                ability=steppe_birther_of_fiends
                canrecruit=no
            [filter_location]
            [filter]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
            [/filter]
            radius=9
            [not]
            terrain=*^V*
            [or]
#so the witches attack if near the leader
            [filter]
                side={SIDE}
                cancrecruit=yes
            [/filter]
            radius=5
            [/or]
            [/not]
            [/filter_location]
            [/filter]
            [filter_second]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
            [/filter_second]
            distance=6
            attack_if_trapped=yes
        [/micro_ai]

    {MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
    [candidate_action]
        engine=lua
        name=steppe_recall
        id=steppe_recall
        max_score=500000
        location="~add-ons/1The_Great_Steppe_Era/lua/ca_steppe_recall.lua"
    [/candidate_action]        
    )}

    {MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
    [candidate_action]
        engine=lua
        name=steppe_longrange
        id=steppe_longrange
        max_score=150000
        location="~add-ons/1The_Great_Steppe_Era/lua/ca_steppe_longrange.lua"
    [/candidate_action]
    )}

    {MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
    [candidate_action]
        engine=lua
        name=steppe_ravenform
        id=steppe_ravenform
#        max_score=300000
#        max_score=179000 #using a CA score lower than recruitment, because having it run right before recruitment/recalling crashes the game due to an undo stack bug EDIT: nevermind the bug was fixed in the latest version
        max_score=200000
        location="~add-ons/1The_Great_Steppe_Era/lua/ca_steppe_ravenform.lua"
    [/candidate_action]
    )}


#some slav custom CAs are now disable by default, until I properly port them to 1.16/improve them
    [if]
    {VARIABLE_CONDITIONAL steppe_experimental_ai equals yes}
    [then]

    {MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
    [candidate_action]
        engine=lua
        name=steppe_repairvillage
        id=steppe_repairvillage
        max_score=225000
        location="~add-ons/1The_Great_Steppe_Era/lua/ca_steppe_repairvillage.lua"
    [/candidate_action]
    )}

        [micro_ai]
            side={SIDE}
            ai_type=goto
            action=add
            ca_id=slav_goto_destroyed_village

            [filter]
                ability=steppe_repair_village
                #this is to make the unit not try to go for villages that are way outside its current reach
                [filter_location]
                    find_in=destroyed_village_information
                    radius=8
                [/filter_location]
            [/filter]
            [filter_location]
                find_in=destroyed_village_information
                radius=1
            [/filter_location]
            ca_score=50000#relatively low priority
            unique_goals=yes#this is so repairers don't all try to go for the same village
            avoid_enemies=2#tries to slightly avoid enemies if possible
        [/micro_ai]

    {MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
    [candidate_action]
        engine=lua
        name=steppe_building
        id=steppe_building
        max_score=200000
        location="~add-ons/1The_Great_Steppe_Era/lua/ca_steppe_building.lua"
    [/candidate_action]
    )}

    [/then]
    [/if]

#unused, as I can check whether a side is AI or not using syncronized choice
#    {MODIFY_AI_ADD_CANDIDATE_ACTION {SIDE} main_loop (
#    [candidate_action]
#        engine=lua
#        name=steppe_check_if_ai
#        id=steppe_check_if_ai
#        max_score=700000#extremely high score, so this always triggers first
#        location="~add-ons/1The_Great_Steppe_Era/lua/ca_steppe_check_if_ai.lua"
#    [/candidate_action]
#    )}

# [/then]
# [/if]

#removed the faction check, as it makes the AI not work on survival maps, where there are no enemy units at the start

#[if]
# [have_unit]
#     side={SIDE}
#     ability=slavfaction
# [/have_unit]
# [then]
        [micro_ai]
            side={SIDE}
            ai_type=lurkers
            ca_id=steppe_slav_ambush
            action=add
            ca_score=150000

            [filter]
                ability=slavfaction
                canrecruit=no
                [and]
                ability=ambush
                [/and]
                [filter_location]
                [filter]
                [filter_side]
                [enemy_of]
                    side={SIDE}
                [/enemy_of]
                [/filter_side]
                [/filter]
                radius=12
                [/filter_location]
            [/filter]
            [filter_location]
            [/filter_location]
            [filter_location_wander]
                terrain=*^F*,Ss^*,St^*,Sm^*
            #tries to set up ambushes not too far from enemies
            [and]
                [filter]
                [filter_side]
                [enemy_of]
                    side={SIDE}
                [/enemy_of]
                [/filter_side]
                [/filter]
                radius=7
            [/and]
            [/filter_location_wander]
        [/micro_ai]

        [micro_ai]
            side={SIDE}
            ai_type=coward
            ca_id=steppe_slav_raven_retreat
            action=add
            [filter]
                race=steppe_raven
                formula=(hitpoints < max_hitpoints * 0.6)
            [filter_location]
            [filter]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
            [/filter]
            radius=7
            [/filter_location]
            [/filter]
            [filter_second]
            [filter_side]
            [enemy_of]
                side={SIDE}
            [/enemy_of]
            [/filter_side]
            [/filter_second]
            distance=7
            attack_if_trapped=yes
            ca_score=30000 #ca score lower than the one for transformation
        [/micro_ai]
# [/then]
#[/if]

        #makes the AI try to not attack walls unless it doesn't have much more important to do
        [modify_ai]
            side={SIDE}
            action=add
            path=aspect[attacks].facet[]
            [facet]
                invalidate_on_gamestate_change=yes
                [filter_own]
                [/filter_own]
                [filter_enemy]
                    [not]
                        ability=steppe_unimportant_target
                        [or]
                            ability=steppe_captured
                        [/or]
                    [/not]
                [/filter_enemy]
            [/facet]
        [/modify_ai]
        [micro_ai]
            side={SIDE}
            ai_type=simple_attack
            action=add
            ca_score=30000#fairly low CA score
            [filter]
            [/filter]
            [filter_second]
                ability=steppe_unimportant_target
            [/filter_second]
        [/micro_ai]

[/then]
[/if]

{CLEAR_VARIABLE steppe_ai_currentside}
#enddef

#define EVENTLOADER_AI
[event]
    name=preload
    first_time_only=no
    [lua]
       code = << wesnoth.require "~add-ons/1The_Great_Steppe_Era/lua/slave_mai.lua"

function wesnoth.custom_synced_commands.longrange_attack(cfg)
    local unit = wesnoth.units.find_on_map {x = cfg.x, y = cfg.y}

--    wesnoth.message("longrange unit coordinates: "..cfg.x.." "..cfg.y)
--    wesnoth.message("target unit coordinates: "..cfg.x2.." "..cfg.y2)
--    wesnoth.message("current sync state "..wesnoth.current.synced_state)

--    wesnoth.units.erase(cfg.x2, cfg.y2)
--    wesnoth.units.to_map({ side = wesnoth.current.side, type = "Swordsman", moves = 2 }, cfg.x2, cfg.y2)

    wesnoth.fire_event("steppe_longrangedattack", cfg.x, cfg.y, cfg.x2, cfg.y2, {})
end

function wesnoth.custom_synced_commands.ravenform_transform(cfg)
    local unit = wesnoth.units.get(cfg.x, cfg.y)
    wesnoth.fire_event("steppe_customevent_ravenform", cfg.x, cfg.y, {id = unit.id})
end

function wesnoth.custom_synced_commands.repair_village(cfg)
--    local unit = wesnoth.get_unit(cfg.x, cfg.y)
    wml.variables["tmp_repair_x"] = repair_x
    wml.variables["tmp_repair_y"] = repair_y
--    wesnoth.fire_event("steppe_customevent_repairing", cfg.x, cfg.y, {id = unit.id})
--    wesnoth.message(repair_id,repair_x)
--    wesnoth.message(repair_y)
--    wesnoth.message("steppe_repair_event_"..repair_id)
    wesnoth.fire_event("steppe_customevent_repairvillage", repair_x, repair_y, {})
end

function wesnoth.custom_synced_commands.building_build(cfg)
--    local unit = wesnoth.get_unit(cfg.x, cfg.y)
    wml.variables["tmp_build_x"] = build_x
    wml.variables["tmp_build_y"] = build_y
--    wesnoth.fire_event("steppe_customevent_building", cfg.x, cfg.y, {id = unit.id})
--    wesnoth.message(build_id,build_x)
--    wesnoth.message(build_y)
--    wesnoth.message("steppe_build_event_"..build_id)
    wesnoth.fire_event_by_id("steppe_build_event_"..build_id, build_x, build_y, {})
end

        >>
    [/lua]
[/event]
[event]
    name=start
    id=steppe_ai_event
    first_time_only=no
    {IF_VAR steppe_disable_ai not_equals yes (
    [then]
    {STEPPE_MICROAIS 1}
    {STEPPE_MICROAIS 2}
    {STEPPE_MICROAIS 3}
    {STEPPE_MICROAIS 4}
    {STEPPE_MICROAIS 5}
    {STEPPE_MICROAIS 6}
    {STEPPE_MICROAIS 7}
    {STEPPE_MICROAIS 8}
    {STEPPE_MICROAIS 9}

#adding the AI options to sides past 9, as 9 is no longer a hard limit

    {STEPPE_MICROAIS 10}
    {STEPPE_MICROAIS 11}
    {STEPPE_MICROAIS 12}
    {STEPPE_MICROAIS 13}
    {STEPPE_MICROAIS 14}
    {STEPPE_MICROAIS 15}
    [/then])}
[/event]
[event]
    name=side turn 6
    id=steppe_ai_removehunn_cowardice_event
    first_time_only=no
    [micro_ai]
    side=$side_number
    ai_type=coward
    ca_id=steppe_hunn_witch_ai
    action=delete
    [/micro_ai]
[/event]
#enddef